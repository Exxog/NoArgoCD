package watchers

import (
	"fmt"
	"log"
	"time"

	"github.com/Exxog/NoArgoCD/internal/utils"
)

// gitRepo repr√©sente un d√©p√¥t git √† surveiller
type GitRepo struct {
	URL    string
	Branch string
}

// Watcher interface pour g√©rer la d√©tection de nouveaux commits

// gitWatcher surveille les commits sur des d√©p√¥ts git
type GitWatcher struct {
	controller      Watcher
	repositories    []GitRepo
	repositoriesMap map[string]struct{}
}

// NewgitWatcher cr√©e un watcher attach√© √† un contr√¥leur et un client git
func NewGitWatcher(controller Watcher) *GitWatcher {
	return &GitWatcher{
		controller:      controller,
		repositoriesMap: make(map[string]struct{}),
	}
}

func (w *GitWatcher) AddRepository(repo GitRepo) {
	// Cr√©er une cl√© unique pour chaque d√©p√¥t bas√©e sur l'URL et la branche
	key := fmt.Sprintf("%s-%s", repo.URL, repo.Branch)

	// V√©rifier si le d√©p√¥t existe d√©j√† en utilisant la map
	if _, exists := w.repositoriesMap[key]; exists {
		// Si le d√©p√¥t existe d√©j√†, afficher un message
		fmt.Printf("[watchers][git] ‚ö†Ô∏è Le d√©p√¥t %s (%s) existe d√©j√† !\n", repo.URL, repo.Branch)
		return
	}

	// Si le d√©p√¥t n'existe pas, l'ajouter √† la liste et √† la map
	w.repositories = append(w.repositories, repo)
	w.repositoriesMap[key] = struct{}{}
	fmt.Printf("[watchers][git] üìå D√©p√¥t ajout√© : %s (%s)\n", repo.URL, repo.Branch)
}

func (w *GitWatcher) RemoveRepository(repo GitRepo) {
	// Cr√©er une cl√© unique pour identifier le d√©p√¥t
	key := fmt.Sprintf("%s-%s", repo.URL, repo.Branch)

	// V√©rifier si le d√©p√¥t existe dans la map
	if _, exists := w.repositoriesMap[key]; !exists {
		fmt.Printf("[watchers][git] ‚ö†Ô∏è Le d√©p√¥t %s (%s) n'existe pas dans la liste !\n", repo.URL, repo.Branch)
		return
	}

	// Supprimer de la map
	delete(w.repositoriesMap, key)

	// Supprimer de la slice w.repositories
	for i, r := range w.repositories {
		if r.URL == repo.URL && r.Branch == repo.Branch {
			// Retirer l'√©l√©ment de la slice
			w.repositories = append(w.repositories[:i], w.repositories[i+1:]...)
			fmt.Printf("[watchers][git] ‚ùå D√©p√¥t supprim√© : %s (%s)\n", repo.URL, repo.Branch)
			return
		}
	}
}

func (w *GitWatcher) NotifyNewCommit(repo GitRepo, commit string) {
	// Impl√©mente la logique pour notifier d'un nouveau commit, par exemple un log ou un appel √† une API
	log.Printf("[watchers][git] Nouveau commit d√©tect√© dans le d√©p√¥t %s (branche: %s): %s\n", repo.URL, repo.Branch, commit)
	w.controller.NotifyNewCommit(repo, commit)

}

func (w *GitWatcher) CheckRepo(repo GitRepo, commitHistory map[string]string) {
	// R√©cup√©rer le dernier commit du d√©p√¥t distant
	latestCommit, err := utils.GetLatestCommit(repo.URL, repo.Branch)
	if err != nil {
		log.Printf("[watchers][git] ‚ùå Erreur lors de la r√©cup√©ration du dernier commit %s [%s]: %v\n", repo.URL, repo.Branch, err)
		return
	}

	// V√©rifier si le commit a chang√©
	if commitHistory[repo.URL] != latestCommit {
		// Si un nouveau commit est trouv√©, notifie
		w.NotifyNewCommit(repo, latestCommit)
		// Met √† jour l'historique des commits
		commitHistory[repo.URL] = latestCommit
	} else {
		log.Println("[watchers][git] ‚ö†Ô∏è Aucun nouveau commit pour ", repo.URL, repo.Branch, " last:", latestCommit, " current:", commitHistory[repo.URL])
	}
}

func (w *GitWatcher) Watch(interval time.Duration) {
	commitHistory := make(map[string]string)

	// Lancer la surveillance des d√©p√¥ts √† intervalles r√©guliers
	for {
		for _, repo := range w.repositories {
			w.CheckRepo(repo, commitHistory)
		}
		// Attendre l'intervalle sp√©cifi√© avant la prochaine v√©rification
		time.Sleep(interval)
	}
}
